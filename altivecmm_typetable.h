#pragma once

/***

	Data type information according to 

	   https://www.ibm.com/developerworks/community/wikis/home?lang=en#!/wiki/W51a7ffcf4dfd_4b40_9d82_446ebc23c550/page/Intel%20SSE%20to%20PowerPC%20AltiVec%20migration

	Autogenerated using:

		print "\n\n".join("""template <>
		struct typetable<%s> {
			using vectype = __vector %s;
			enum { elem_count = %d,
			       elem_size = %d};
		};""" % (t, t, e, c) for t, e, c in types)

*/

#define POWER7 1
#define POWER8 1

namespace altivecmm {

	template<typename T>
	struct typetable;

	template <>
	struct typetable<unsigned char> {
		using vectype = __vector unsigned char;
		enum { elem_count = 16,
			   elem_size = 8};
	};

	template <>
	struct typetable<signed char> {
		using vectype = __vector signed char;
		enum { elem_count = 16,
			   elem_size = 8};
	};

	/*template <>
	struct typetable<bool char> {
		using vectype = __vector bool char;
		enum { elem_count = 16,
			   elem_size = 8};
	};*/

	template <>
	struct typetable<unsigned short> {
		using vectype = __vector unsigned short;
		enum { elem_count = 8,
			   elem_size = 16};
	};

	template <>
	struct typetable<signed short> {
		using vectype = __vector signed short;
		enum { elem_count = 8,
			   elem_size = 16};
	};
	
	/*template <>
	struct typetable<bool short> {
		using vectype = __vector bool short;
		enum { elem_count = 8,
			   elem_size = 16};
	};*/

	/*template <>
	struct typetable<__pixel> {
		using vectype = __vector __pixel;
		enum { elem_count = 8,
			   elem_size = 16};
	};*/

	template <>
	struct typetable<unsigned int> {
		using vectype = __vector unsigned int;
		enum { elem_count = 4,
			   elem_size = 32};
	};

	template <>
	struct typetable<signed int> {
		using vectype = __vector signed int;
		enum { elem_count = 4,
			   elem_size = 32};
	};

	/*template <>
	struct typetable<bool int> {
		using vectype = __vector bool int;
		enum { elem_count = 4,
			   elem_size = 32};
	};*/

	template <>
	struct typetable<float> {
		using vectype = __vector float;
		enum { elem_count = 4,
			   elem_size = 32};
	};

#if POWER7
	template <>
	struct typetable<double> {
		using vectype = __vector double;
		enum { elem_count = 2,
			   elem_size = 64};
	};
#endif

#if POWER8
	template <>
	struct typetable<unsigned long> {
		using vectype = __vector unsigned long;
		enum { elem_count = 2,
			   elem_size = 64};
	};

	template <>
	struct typetable<signed long> {
		using vectype = __vector signed long;
		enum { elem_count = 2,
			   elem_size = 64};
	};

	template <>
	struct typetable<long long> {
		using vectype = __vector long long;
		enum { elem_count = 2,
			   elem_size = 64};
	};

	template <>
	struct typetable<unsigned long long> {
		using vectype = __vector unsigned long long;
		enum { elem_count = 2,
			   elem_size = 64};
	};

	/*template <>
	struct typetable<long bool> {
		using vectype = __vector long bool;
		enum { elem_count = 2,
			   elem_size = 64};
	};*/
#endif
}
